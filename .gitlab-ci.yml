image: $CI_REGISTRY_IMAGE/builder:latest
services:
  - docker:dind
  - postgres:latest

stages:
  - build
  - test
  - review
  - staging
  - production

variables:
  POSTGRES_DB: reumanager
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_HOST: postgres
  TEST_DB: reumanager
  DOCKER_DRIVER: overlay
  REGISTRY_HOST: registry.gitlab.com
  REGISTRY_URI: TODO/reumanager
  SITE_URI_BASE: TODO


before_script:
  - export REGISTRY_FULL=registry.gitlab.com/notch8/ror-site/$CI_COMMIT_REF_SLUG:${CI_COMMIT_SHA:0:8}
  - export TAG=$CI_COMMIT_REF_SLUG
  - eval $(ssh-agent -s)
  - bash
  - ssh-add <(echo "$SSH_PRIVATE_KEY") 
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

build:
  stage: build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - sc build
    - sc push
  tags:
    - docker

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
  script:
    - cd /home/app/webapp && bundle exec rake db:create db:schema:load spec
  tags:
    - docker
  variables:
    GIT_STRATEGY: none

review:
  stage: review
  type: deploy
  environment:
    name: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    url: http://web.$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.staging.$SITE_URI_BASE
    on_stop: stop_review
  only:
    - branches
  except:
    - master
  script:
    - export RANCHER_ENVIRONMENT=staging
    - sc provision ci

 tags:
    - docker
    - mysql

stop_review:
  stage: review
  script:
    - export RANCHER_ENVIRONMENT=staging
    - rancher rm $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG

  when: manual
  environment:
    name: $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
    action: stop

staging:
  stage: staging
  type: deploy
  script:
    - sc deploy staging 
  only:
    - master
  tags:
    - docker

production:
  stage: production
  type: deploy
  script:
    - sc deploy production
  when: manual
  only:
    - master
  tags:
    - docker
